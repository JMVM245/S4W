document.addEventListener('DOMContentLoaded', function() {
    const scanForm = document.getElementById('scanForm');
    const resultsDiv = document.getElementById('results');
    const scanResults = document.getElementById('scanResults');

    // Función para mostrar notificaciones
    function showNotification(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : 'info-circle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.querySelector('.container').insertBefore(alertDiv, resultsDiv);
        
        // Auto-cerrar después de 5 segundos
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 5000);
    }

    // Función para mostrar el spinner de carga
    function showLoading() {
        scanResults.innerHTML = `
            <div class="text-center py-5">
                <div class="spinner-border mb-3" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="text-muted">Realizando escaneo de seguridad...</p>
            </div>
        `;
        resultsDiv.style.display = 'block';
    }

    scanForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const target = document.getElementById('target').value;
        const submitButton = this.querySelector('button[type="submit"]');
        
        try {
            // Deshabilitar el botón y mostrar loading
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                Escaneando...
            `;
            
            showLoading();
            
            // Realizar la petición al servidor
            const response = await fetch('/scan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ target })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                displayResults(data);
                showNotification('Escaneo completado exitosamente', 'success');
            } else {
                throw new Error(data.error || 'Error al realizar el escaneo');
            }
        } catch (error) {
            scanResults.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    ${error.message}
                </div>
            `;
            showNotification(error.message, 'danger');
        } finally {
            // Restaurar el botón
            submitButton.disabled = false;
            submitButton.innerHTML = `
                <i class="bi bi-search me-2"></i>Iniciar Escaneo
            `;
        }
    });

    function displayResults(data) {
        const vulnerabilities = data.results.vulnerabilities || [];
        
        if (vulnerabilities.length === 0) {
            scanResults.innerHTML = `
                <div class="alert alert-success" role="alert">
                    <i class="bi bi-shield-check me-2"></i>
                    No se encontraron vulnerabilidades en el objetivo analizado.
                </div>
            `;
            return;
        }
        
        let html = `
            <div class="vulnerabilities-list">
                <div class="alert alert-info mb-4">
                    <i class="bi bi-info-circle me-2"></i>
                    Se encontraron ${vulnerabilities.length} vulnerabilidades
                </div>
        `;
        
        vulnerabilities.forEach(vuln => {
            const severityIcon = {
                high: 'exclamation-triangle-fill',
                medium: 'exclamation-circle-fill',
                low: 'info-circle-fill'
            }[vuln.severity.toLowerCase()];
            
            html += `
                <div class="vulnerability-item ${vuln.severity.toLowerCase()}">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-${severityIcon} me-2"></i>
                        <h4 class="mb-0">${vuln.type}</h4>
                    </div>
                    <p class="severity">
                        <i class="bi bi-flag me-1"></i>
                        Severidad: ${vuln.severity}
                    </p>
                    <p class="description">
                        <i class="bi bi-info-circle me-1"></i>
                        ${vuln.description}
                    </p>
                </div>
            `;
        });
        
        html += '</div>';
        scanResults.innerHTML = html;
    }
}); 