import logging
from typing import Dict, Any, Optional
from models.base import Scan, ScanResult, init_db

logger = logging.getLogger(__name__)

class Reporter:
    def __init__(self):
        self.db = init_db()
    
    def get_report(self, scan_id: str) -> Optional[Dict[str, Any]]:
        """
        Obtiene el reporte de un escaneo específico.
        
        Args:
            scan_id (str): ID del escaneo
            
        Returns:
            Optional[Dict[str, Any]]: Reporte del escaneo o None si no existe
        """
        scan = self.db.query(Scan).filter_by(scan_id=scan_id).first()
        if not scan:
            return None
        
        results = self.db.query(ScanResult).filter_by(scan_id=scan_id).all()
        
        return {
            'scan_id': scan.scan_id,
            'target': scan.target,
            'status': scan.status,
            'created_at': scan.created_at.isoformat(),
            'completed_at': scan.completed_at.isoformat() if scan.completed_at else None,
            'vulnerabilities': [
                {
                    'type': result.vulnerability_type,
                    'severity': result.severity,
                    'description': result.description,
                    'created_at': result.created_at.isoformat()
                }
                for result in results
            ]
        }
    
    def generate_summary(self, scan_id: str) -> Optional[Dict[str, Any]]:
        """
        Genera un resumen del escaneo.
        
        Args:
            scan_id (str): ID del escaneo
            
        Returns:
            Optional[Dict[str, Any]]: Resumen del escaneo o None si no existe
        """
        report = self.get_report(scan_id)
        if not report:
            return None
        
        vulnerabilities = report['vulnerabilities']
        severity_counts = {
            'high': 0,
            'medium': 0,
            'low': 0
        }
        
        for vuln in vulnerabilities:
            severity = vuln['severity'].lower()
            if severity in severity_counts:
                severity_counts[severity] += 1
        
        return {
            'scan_id': scan_id,
            'target': report['target'],
            'status': report['status'],
            'total_vulnerabilities': len(vulnerabilities),
            'severity_breakdown': severity_counts,
            'scan_duration': self._calculate_duration(report)
        }
    
    def _calculate_duration(self, report: Dict[str, Any]) -> Optional[float]:
        """
        Calcula la duración del escaneo en segundos.
        
        Args:
            report (Dict[str, Any]): Reporte del escaneo
            
        Returns:
            Optional[float]: Duración en segundos o None si no se puede calcular
        """
        if not report['completed_at']:
            return None
        
        from datetime import datetime
        start = datetime.fromisoformat(report['created_at'])
        end = datetime.fromisoformat(report['completed_at'])
        
        return (end - start).total_seconds() 